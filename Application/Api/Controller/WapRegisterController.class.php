<?php
namespace Api\Controller;
use Think\Controller;
class WapRegisterController extends BaseController{

    public $Sms = '';
    public $Member = '';
    public function _initialize()
    {
        $this -> Sms = M('sms');
        $this -> Member = M('member');
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * wap注册页面展示
     */
    public function wapRegister(){
        if($_GET['invite_code'])$this -> assign('invite_code',$_GET['invite_code']); // 判断邀请码是否存在
        $this->display('index');
    }

   /**
    * [doRegister 注册]
    * @var  account  账号
    * @var  pass 密码
    * @var  code 验证码
    * @var  invite 邀请码
    * @return json [根据判断条件返回结果集]
    *        info : '验证码失效'
    *        status : '0'  0 否 1 是
    *        data : array()
    */
    public function doRegister(){
        $account = trim($_POST['account']);
        $pass    = trim($_POST['pass']);
        $code    = trim($_POST['code']);
        $type = 'activity';
        $invite  = $_POST['invite'] ? trim($_POST['invite'] ): '';
        // 验证 验证码
        $verify = $this -> Sms-> where( array( 'type'=>$type,'way'=>$account,'vc'=>$code ) ) ->field('id') -> count(); 
        if($verify <= 0){$data['info']   = '验证码错误';$data['status'] = 0;$data['data']   = array();
            $this->ajaxReturn($data);exit;
        }unset($verify);
        // 验证 验证码超时
        $verify = $this -> Sms-> where( array( 'type'=>$type,'way'=>$account,'vc'=>$code,'expire_time'=>array('gt',time()) ) )->field('id')->count(); // 验证时间
        if($verify <= 0){$data['info'] = '验证码失效';$data['status'] = 0;$data['data'] = array();
            $this->ajaxReturn($data);exit;
        }unset($verify);
        // 验证 账号是否存在
        $verify = $this -> Member -> where(array('account'=>$account)) -> field('id') -> count();
        if($verify > 0){
            $data['info'] = '该手机号已是会员';$data['status'] = 0;$data['data'] = array();
            $this->ajaxReturn($data);exit;
        }unset($verify);
        // 判断 是否有验证码 上级ID
        $invite_code = get_vc(8,0); // 生成邀请码
        if($invite != ''){
               $invId  = M('Member') -> where(array('invite_code'=>$invite)) -> getField('id'); // 获得上级ID
               if($invId){
                    $data = array('account'=>$account,'password'=>md5($pass),'inv_id'=>$invId,'invite_code'=>$invite_code);
               }else{
                    $data = array('account'=>$account,'password'=>md5($pass),'invite_code'=>$invite_code);
               }
        }else{
            $data = array('account'=>$account,'password'=>md5($pass),'invite_code'=>$invite_code);
        }
        //注册环信
        $easemob_reg_info = D('Base','Logic')->easemobRegister();
        if($easemob_reg_info['flag'] == 'error'){
            apiResponse('error','注册失败');
        }
        $data['easemob_account'] = $easemob_reg_info['easemob_account'];
        $data['easemob_password']= $easemob_reg_info['easemob_password'];
        $data['nickname']        = $account;
        $data['create_time']     = time();
        $add = M('Member') -> data($data) -> add();
        if(!$add){
            unset($data);
            $data['info'] = '注册失败';$data['status'] = 0;$data['data'] = array();
            $this->ajaxReturn($data);
        }

        //将父级ID和新增ID写入关系表
        unset($where);
        unset($data);
        if($invId){
            $data['parent_id'] = $invId;
        }else{
            $data['parent_id'] = 0;
        }
        $data['m_id']      = $add;
        $data['create_time'] = time();
        $relation = M('Relation') ->add($data);
        if(!$invId){
            unset($data);
            $data['info'] = '注册成功';$data['status'] = 1;$data['data'] = array();
            $this->ajaxReturn($data);
        }
        //计算父级ID的B级人数和人员
        $B_grade = M('Relation') ->where(array('parent_id'=>$invId)) ->select();
        $B_count = M('Relation') ->where(array('parent_id'=>$invId)) ->count();
        $count  = 0;
        $count1 = 0;
        $count2 = 0;
        //计算父级ID的各级别人数
        foreach($B_grade as $k =>$v){
            $D = M('Member') ->where(array('id'=>$v['m_id'],'grade'=>'D')) ->count();
            $C = M('Member') ->where(array('id'=>$v['m_id'],'grade'=>'C')) ->count();
            $B = M('Member') ->where(array('id'=>$v['m_id'],'grade'=>'B')) ->count();
        }
        //计算父级ID的各级别人数
        foreach($B_grade as $k =>$v){
            $C_grade = $this ->dean($v['m_id']);
            $count = $count + $C_grade['count'];
            foreach($C_grade['relation'] as $key => $val){
                $D_grade = $this ->dean($val['m_id']);
                $count1 = $count1 + $D_grade['count'];
                foreach($D_grade['relation'] as $keys => $value){
                    $E_grade = $this ->dean($value['m_id']);
                    $count2 = $count2 + $D_grade['count'];
                }
            }
        }
        //根据各级别人数更改人员表数据库
        if($B_count >= 1000&& $count >= 10000&& $B >= 500){
            $grade = 'A';
        }elseif($B_count >= 200&& $count >= 1000 && $C >= 125){
            $grade = 'B';
        }elseif($B_count >= 100&& $count >= 400 && $D >= 50){
            $grade = 'C';
        }elseif($B_count >= 10){
            $grade = 'D';
        }else{
            $grade = 'E';
        }
        unset($where);
        unset($data);
        $where['id']   = $invId;
        $data['grade'] = $grade;
        $data['update_time'] = time();
        $result = M('Member') ->where($where) ->data($data) ->save();

        unset($data);
        $data['info'] = '注册成功';$data['status'] = 1;$data['data'] = array();
        $this->ajaxReturn($data);
    }

    public function dean($m_id){
        $result['relation'] = M('Relation')->where(array('parent_id'=>$m_id)) ->select();
        $result['count']    = M('Relation')->where(array('parent_id'=>$m_id)) ->count();
        return  $result;
    }

}